generator client {
  provider = "prisma-client-js"
  output   = "../functions/node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

/**
 * 既存テーブルここから（触らない）
 */
model skills {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model study_record {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  records String  @db.VarChar
  time    Int?
  remark  String? @db.VarChar

  @@map("study-record")
}

model todos {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  title      String?  @db.VarChar
  done       Boolean? @default(false)
}

model user_skill {
  id         BigInt    @id @default(autoincrement())
  user_id    String    @db.VarChar
  skill_id   BigInt?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model users {
  id          String    @id @default("") @db.VarChar
  name        String    @default("") @db.VarChar
  description String?   @default("")
  github_id   String?   @db.VarChar
  qiita_id    String?   @db.VarChar
  x_id        String?   @db.VarChar
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
}

/**
 * 既存テーブルここまで（触らない）
 */

/**
 * 新規に追加したいテーブルだけ（article_versions）
 */

enum AimaiCategory {
  HEDGING
  VAGUE
  QUANTITY
  RESPONSIBILITY
  OTHER
}

model User {
  id          String   @id @db.VarChar(128)
  authorLabel String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles Article[]
}

model Article {
  id          String   @id @default(cuid())
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])
  title       String?
  authorLabel String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  versions ArticleVersion[]
}

model ArticleVersion {
  id        String   @id @default(cuid())
  articleId String
  article   Article  @relation(fields: [articleId], references: [id])
  index     Int
  title     String?
  content   String   @db.Text
  createdAt DateTime @default(now())

  checkRuns CheckRun[]

  @@unique([articleId, index], map: "article_versions_article_index_key")
  @@index([createdAt], map: "article_versions_created_at_idx")
  @@map("article_versions")
}

model CheckRun {
  id           String         @id @default(cuid())
  versionId    String
  version      ArticleVersion @relation(fields: [versionId], references: [id])
  dictionaryId String?
  aimaiScore   Float
  totalCount   Int
  charLength   Int
  createdAt    DateTime       @default(now())

  findings Finding[]

  @@index([createdAt], map: "check_runs_created_at_idx")
  @@map("check_runs")
}

model Finding {
  id    String   @id @default(cuid())
  runId String
  run   CheckRun @relation(fields: [runId], references: [id])

  start       Int
  end         Int
  matchedText String
  category    AimaiCategory
  severity    Int
  reason      String?

  patternId String?
  pattern   AimaiPattern? @relation(fields: [patternId], references: [id])

  createdAt DateTime @default(now())

  @@index([runId], map: "findings_run_id_idx")
  @@index([patternId], map: "findings_pattern_id_idx")
  @@map("findings")
}

model AimaiPattern {
  id          String        @id @default(cuid())
  name        String
  regex       String
  flags       String?
  category    AimaiCategory
  severity    Int
  explanation String?
  enabled     Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // 逆側
  findings Finding[]

  @@map("aimai_patterns")
}
